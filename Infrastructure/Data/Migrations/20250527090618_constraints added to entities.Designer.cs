// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(SqlServerDbContext))]
    [Migration("20250527090618_constraints added to entities")]
    partial class constraintsaddedtoentities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.BookingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("BookingOwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookingOwnerId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Domain.Entities.BookingOwnerAddressEntity", b =>
                {
                    b.Property<Guid>("BookingOwnerEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("BookingOwnerEntityId");

                    b.ToTable("BookingOwnersAddresses");
                });

            modelBuilder.Entity("Domain.Entities.BookingOwnerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("BookingOwners");
                });

            modelBuilder.Entity("Domain.Entities.BookingEntity", b =>
                {
                    b.HasOne("Domain.Entities.BookingOwnerEntity", "BookingOwner")
                        .WithMany("Bookings")
                        .HasForeignKey("BookingOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingOwner");
                });

            modelBuilder.Entity("Domain.Entities.BookingOwnerAddressEntity", b =>
                {
                    b.HasOne("Domain.Entities.BookingOwnerEntity", "BookingOwner")
                        .WithOne("Address")
                        .HasForeignKey("Domain.Entities.BookingOwnerAddressEntity", "BookingOwnerEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingOwner");
                });

            modelBuilder.Entity("Domain.Entities.BookingOwnerEntity", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
